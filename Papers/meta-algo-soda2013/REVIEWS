Date: Wed, 9 Mar 2011 15:49:52 +0000
From: SPAA 2011 <spaa2011@easychair.org>
Subject: SPAA 2011 notification for paper 75

Dear Author(s),

I am happy to inform you that your submission has been accepted as a
regular paper in the 23rd ACM Symposium on Parallelism in Algorithms and
Architectures (SPAA 2011).

The reviews for your submission are appended below.  The Program
Committee members have made an effort to provide useful feedback, but
due to time constraints, this was not always possible. Note that these
reviews may not necessarily reflect all the discussions among the PC
members on your submission.

The camera-ready copy of your paper is due March 30, 2011. This is
only three weeks away. You will receive instructions on how to prepare
the final version of your paper in a separate email.

On behalf of the Program Committee, I would like to thank you for
submitting your work to SPAA 2011, and I look forward to seeing you in
San Jose this summer.

Sincerely,

Rajmohan Rajaraman (PC Chair of SPAA 2011)


---------------------------- REVIEW 1 --------------------------
PAPER: 75
TITLE: The Pochoir Stencil Compiler
   

This paper reports on the development and the specific features of the Pochoir compiler for stencil 
computations in d-dimensional grids. The compiler provides a domain-specific language embedded in 
C++ which is then translated into high-performance Cilk Plus code. The compiler exhibits a
good performance on benchmark libraries.

In my opinion the submission presents good work in the area of high-performance computing. On
the other hand it is not completely clear how the contributions relate to previous work. 



---------------------------- REVIEW 2 --------------------------
PAPER: 75
TITLE: The Pochoir Stencil Compiler
   

The subject of the paper is so-called stencil computations (roughly
equal to dynamic programming with O(1) distance dependencies in table
entry computations).  The paper contains two contributions: 1) an
extension of the trapezoidal decomposition method for cache-oblivious
parallel stencil computations to improve the parallelism, and 2) a
mini-language (embedded in C++) for simple specification of stencil
computations, alongside with a compiler which will automatically compile
it into code using the (new) trapezoidal decomposition algorithm. There
are also empirical tests of the produced code vs. the straight-forward
(parallel) loop-based algorithm.

Evaluation: Stencil computations encompass a large number of important
computations (mainly simulation), making the subject important. The
language and compiler seem very cleanly done, and appear to be of
obvious practical value. The improvement of the trapezoidal
decomposition algorithm is well spotted, although not that deep. The
empirical investigations are somewhat extensive (many different stencil
computation problems, two architectures tested), but are only comparing
the compiled code to the plain loop-based algorithm (and showing good
improvement over it) - NOT to hand-coded versions of the new trapezoidal
algorithm (or just the old), which would be the real baseline for
comparison of automatically generated code. The only empirical
comparison reported of the new vs. the old version of the parallel
trapezoidal algorithm is by (what sounds to be) an analysis tool
(Cilkview) on a single problem instance (showing a bit more parallelism
achieved). Here, comparison in terms of running time would be natural to
include. Also, [23] seems a rather direct competitor. Why wasn't there
an attempt at comparing with code from that? In short, the empirical
part is actually quite weak, and gives very little clue on how the
generate code compares to state-of-the-art in efficiency.  Should the
paper be accepted, I really hope the authors try to improve on this part
in the final version.

The exposition is very nice, but with a few things that could be
improved (see below).

Basically, I like the paper, but is has severe empirical shortcomings.

Further details for authors:

 - An explanation for the name Pochoir would leave the reader less
   puzzled.

 - There is no indication of where the cache-efficiency is coming
   from. The analysis part of the paper seems to require familiarity
   with previous work ([(13),14,15]. There must be some assumption on
   the memory layout of arrays made (as for any cache analysis)?

 - The inequalities for r and gamma in Thms. 2 and 3 seem weird for an
   upper bound theorem. Shouldn't they be the other way?

 - As said above, the empirical part would be more convincing with
   comparisons (in terms of running time) of compiled code vs.
   non-compiler generated code, and of the old vs. the new version of
   the trapezoidal algorithm.

 - Entry 18 in the bibliography seems incomplete. 



---------------------------- REVIEW 3 --------------------------
PAPER: 75
TITLE: The Pochoir Stencil Compiler
   

The authors present Pochoir, an automated system for generating code for parallel stencil 
computations. They discuss various examples and their strategies for issues like cache efficiency, 
tiling, boundary conditions and coarsening the base case. There are two major problems with this 
paper. (1) It completely ignores the large set of related literature and systems. Parallel stencil 
computations are a very popular topic. In particular, the paper ignores the recent work on 
AUTOTUNING for parallel stencil computations. Those autotumers do exactly the same: automatically 
generate optimized parallel code for stencil computations. One of many such papers is e.g. 
"Venkatasubramanian S, Vuduc R.: Tuned and wildly asynchronous stencil kernels for hybrid CPU/GPU 
systems. ICS. 2009:244-255". Vuduc and Williams (Berkeley Phd thesis and subsequent papers) and 
several others worked on autotuning and on automatic code generation for parallel stencil 
computations. None of that work is referenced in this paper. (2) The performance evaluation is 
completely inadequate. They only compare Pochoir with the trivial LOOP implementation and neither 
with any of the other results mentioned above nor with any of the related approaches mentioned in 
their paper. 



---------------------------- REVIEW 4 --------------------------
PAPER: 75
TITLE: The Pochoir Stencil Compiler
   

This paper describes aspects of the parallel stencil compiler called Pochoir.  The compiler is implemented in two parts: 1) a set of C++ templates that, at runtime, check to see if the user has written a Pochoir-compliant stencil and 2) a source to source compiler that outputs transformed, optimized C++ code using a parallel cache oblivious algorithm, to be compiled by a C++ compiler.

There are three contribution areas of the paper: (a) a new cache-efficient parallel stencil algorithm; (b) the Pochoir embedded language and the code generation; (c) experiments testing the Pochoir compiler.

Taken together, it seems like a reasonable contribution, but it is deficient or incremental in each of the above points.  For instance, (a) builds heavily on the work of Frigo and Strumpen.  This is probably the most technically significant part of the paper.  Though the embedded language is specified, there is almost no description of the compiler details (these are all deferred to the full paper).  The experiments are very inadequate.  The only test is against a loop implementation.  The authors should compare their (serial or parallel) time against existing stencil autotuners, or the very list, against an upper-bound on performance such as Roofline, which should be simple to do for some of the kernels.

The paper reads as a workshop paper in some ways.

I would ask the authors to improve the paper in several ways.

First, it is unclear to me why the authors have several places in which they omit explanations or details and say they will appear in a "full version" of the paper--- is this referring to the final version, or a version intended for another conference?

Structurally, all of the performance results are in the "Introduction" section--- this seems odd.  

Section 2 gives little information to the reader on how exactly the Pochoir compiler is implemented.  In particular, even a few sentences about what (if any frameworks) the compiler uses, how it parses, limitations on that parsing, how the transformations are implemented (is it simple string replacement, etc) would be far more informative.  As is stands, Figure 5 is not very informative and a few sentences about the above would be a better use of space.

Section 4 is a very nice explanation of the algorithm.

It is unclear how Pochoir is employing ISAT to set a tuning parameter for coarsening.

Related work is well done and complete.

Other things:
- p2 "number of grid points that fit on a line" -- is this referring to a cache line? it is unclear from context.
- p3 Fig 1 caption: I don't see "pairs" of arguments here.
- p6 "a serial loops" should be "a serial loop"
- p7 "respresent the offset of each memory footprint relative to the space-time point" is very confusing.  unless the reader has a detailed understanding of Frigo and Strumpen's algorithm, the sentence is difficult to parse.
- p11 "to user's specification" should be "to a user's specification." 

